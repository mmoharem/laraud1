
1- ////..Pasing Data Into Controller

   // in PostsController

        public function index(id)
        {
            return 'welcome to posts'.id;
        }

    // in routers

        Route::get('/post/{id}', 'PostsController@index');

2- // Using all resource method in Controller
   
   insted of using..
   Route::get('/post/{id}', 'PostsController@index');

   Use..
   Route::resource('posts', 'PostsController');

   $php artisan rout:list


////...Using Balde Templet

1- creat folder (layouts) under (view) then add the following file (app.blade.ph)
   @yield('content')
   @extend('layouts.app')
       @section('content')

       @endsection


////....Migration...

1- .env stand for enviroment.
    ..note. https://github.com/vlucas/phpdotenv

1- migration 

    public function up()
            {
//static method with Schima class...//Table name (users)...//convert database to $table object
            Schema::create('users', function (Blueprint $table) {
                $table->increments('id');
             ////$object->method('variable)  
                $table->string('name');
                $table->string('email')->unique();
                $table->string('password');
                $table->rememberToken();
                $table->timestamps();
            });
        }

2- use $php artisan migrate

3- to make migration table for posts
    $ php artisan make:migration create_posts_table --create="posts"
    $ php artisan migrate
    $ php artisan migrate:rollback

4- creat or adding columns
    $ php artisan make:migration add_is_admin_column_to_posts_table --table="posts" 
    
 -  then goto migration and edite the created migration

    //up
    //$table->integer('is_admin')->unsigned(); 
    //unsigned mean that it cannot be a -ve number

    use this instead $table->tinyInteger('is_admin')->default(0);

    //down
    $table->dropColumn('is_admin')

 -  then $php artisan migrate

 -  to delet all database tables $php artisan migrate:reset


 ///.. Database Eloguent/ORM....

 1- creating model
    $ php artisan make:model Post

  - laravel will creat a model with class Post then converts it to posts which is our table name.
    .Note.. if you want the table have another name than the model add the following code to the model
        protected $table = 'the table name';

  - also the default $primeryKey is = 'id'
    .Note.. if your primeryKey is deferent you have to define it by adding
        protected $primaryKey = 'post_id';

2- to use create for database we must goto the model and the following

        protected $fillable = [
            'title',
            'body'
        ]

    ..Note. we make to methods sav() and create()

3- Soft Delete with Trash. son in post model do the following
    a) add..  use Illuminate\Database\Eloquent\SoftDelete;
    b) at the post class add..  use SoftDelete;
    c) then add... protected $dates = ['deleted_at'];

 - the goto cmd and run
    $ php artisan make:migration add_deleted_at_column_to_posts_tables --table=posts

 - at the migrate created add the following

    //up
    $table->softDelete();

    //down
    $table->dropColumn('deleted_at');

///.. DB Eloquent Relationship

1- go the post migration file and add

   $table->integer('user_id')->unsigned();
   at the teriminal run
   $ php artisan migrate:refresh

2- go to the user model and add the following

    // ...One to One relationship.
    public function post() {
        return $this->hasOne('App\Post'); //hasone relation 
    }
    //this function will automaticaly look for user_id in Post model
    //..Note. If you name user_id with different name you mast add to the functin as second parameter
        also if you have a different id name for the post table you must specify as thierd parameter
        E.X: return $this->hasOne('App\Post', 'user_id', 'id');


    // ....The inverse relationship.
    public function user() {
        return $this->belongsTo('App\User');
    }

    //.....One to Many relationship
    public function user() {
        return $this->belongsTo('App\User');
    }

3- Many to many relationship

 - creating pivot table: we have to create three tables
 a) users table.
 b) rols table.
    $ php artisan make:model Role -m
 c) pivote table, user_id 
    to make pivote use artisan with the Roles and Users tables.
    $ php artisan make:migration create_users_roles_table --create=role_user

 - then goto edite the two table created by migration
   $ php artisan migate